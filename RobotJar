//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Graphics;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class Robot extends JPanel {
    private int[] obstacles;
    private int[] blocksDepth;
    private int[] newBlocksDepth;
    private int[] newBlocksDepth2;
    private int rH = 2;
    private int rW = 1;
    private int rD = 0;
    private boolean picked = false;
    private int topDepth = 2;
    private int itemsHt;
    private int itemsHt2;
    private int itemsHt3;
    private int numItems;
    private int numItems2;
    private int numItems3;
    private static JFrame frame = new JFrame("Robot");
    private int htItems1;
    private int htItems2;
    private int htItems3;
    private static int counter = 'ï¨€';
    private static int numOps = 0;
    private int currentHeight = 0;
    private boolean ordered;
    private static int[] required;
    private static boolean requiredSet = false;

    public void init() {
    }

    public static boolean stringPerms(String var0, String var1) {
        StringBuffer var2 = new StringBuffer(var1);
        if(var0.length() != var1.length()) {
            return false;
        } else {
            for(int var3 = 0; var3 < var0.length(); ++var3) {
                int var4 = var2.toString().indexOf(var0.charAt(var3));
                if(var4 < 0) {
                    return false;
                }

                var2.deleteCharAt(var4);
            }

            if(var2.length() == 0) {
                return true;
            } else {
                return false;
            }
        }
    }

    public static boolean checkDescending(int[] var0) {
        for(int var1 = 0; var1 < var0.length - 1; ++var1) {
            if(var0[var1] < var0[var1 + 1]) {
                return false;
            }
        }

        return true;
    }

    public static void main(String[] var0) {
        String var1;
        if(var0.length == 0) {
            System.out.println("As you did not enter the height of 6 bars, it is assumed to be 444444");
            var1 = "444444";
        } else {
            var1 = var0[0];
        }

        int var2 = var1.length() > 6?6:var1.length();
        int[] var3 = new int[var2];

        for(int var4 = 0; var4 < var2; ++var4) {
            var3[var4] = var1.charAt(var4) - 48;
            if(var3[var4] < 0 || var3[var4] >= 9) {
                System.out.println("Obstacles must be of height 1 to 8");
                System.exit(0);
            }
        }

        if(var0.length < 2) {
            System.out.println("As you did not enter the height of 4 blocks, it is assumed to be 2222");
            var1 = "2222";
        } else {
            var1 = var0[1];
        }

        var2 = var1.length();
        int[] var13 = new int[var2];
        int var5 = 0;

        for(int var6 = 0; var6 < var2; ++var6) {
            var13[var6] = var1.charAt(var6) - 48;
            var5 += var13[var6];
            if(var5 > 12) {
                System.out.println("Blocks height must not exceed 12");
                System.exit(0);
            }

            if(var13[var6] <= 0 || var13[var6] > 4) {
                System.out.println("Blocks must be of height 1 to 4");
                System.exit(0);
            }
        }

        int var7;
        boolean var14;
        if(var0.length == 3) {
            if(var0[2].toUpperCase().compareTo("ORDERED") == 0) {
                var14 = true;
            } else {
                var14 = false;
            }

            if(var14) {
                if(!checkDescending(var13)) {
                    System.out.println("For Ordering number must be descending");
                    System.exit(0);
                }
            } else if(stringPerms(var0[1], var0[2])) {
                required = new int[var1.length()];
                requiredSet = true;

                for(var7 = 0; var7 < var0[2].length(); ++var7) {
                    required[var7] = var0[2].charAt(var7) - 48;
                }
            } else {
                System.out.println("Destination must be a permutation of Source");
                System.exit(0);
            }
        } else {
            var14 = false;
            required = new int[var1.length()];

            for(var7 = 0; var7 < required.length; ++var7) {
                required[var7] = var13[var13.length - var7 - 1];
            }
        }

        Robot var15 = new Robot(var3, var13, required, var14);
        Container var8 = frame.getContentPane();
        var8.setLayout(new BorderLayout());
        JButton var9 = new JButton("SpeedUp");
        SomeListener var10 = new SomeListener();
        var9.addActionListener(var10);
        frame.getContentPane().add(var9, "North");
        JButton var11 = new JButton("SlowDown");
        var11.addActionListener(var10);
        frame.getContentPane().add(var11, "South");
        frame.getContentPane().add(var15, "Center");
        frame.setDefaultCloseOperation(3);
        frame.setSize(640, 520);
        frame.setVisible(true);
        RobotControl var12 = new RobotControl(var15);
        var12.control(var3, var13, required, var14);
    }

    public Robot(int[] var1, int[] var2, int[] var3, boolean var4) {
        this.obstacles = var1;
        this.blocksDepth = var2;
        this.numItems = var2.length;
        this.newBlocksDepth = new int[this.numItems];
        this.newBlocksDepth2 = new int[this.numItems];
        this.numItems2 = 0;
        required = var3;
        this.ordered = var4;
    }

    public void update() {
        this.itemsHt = this.itemsHt2 = this.itemsHt3 = 400;

        int var1;
        for(var1 = 0; var1 < this.numItems; ++var1) {
            this.itemsHt -= this.blocksDepth[var1] * 30;
        }

        for(var1 = 0; var1 < this.numItems3; ++var1) {
            this.itemsHt3 -= this.newBlocksDepth2[var1] * 30;
        }

        for(var1 = 0; var1 < this.numItems2; ++var1) {
            this.itemsHt2 -= this.newBlocksDepth[var1] * 30;
        }

    }

    public void pick() {
        this.update();
        ++numOps;
        if(!this.picked && 400 - this.rH * 30 + 30 + this.rD * 30 == this.itemsHt2 && this.rW == 1 && this.numItems2 > 0) {
            this.topDepth = this.newBlocksDepth[this.numItems2 - 1] * 30;
            this.picked = true;
            this.currentHeight = this.newBlocksDepth[this.numItems2 - 1];
            --this.numItems2;
            frame.repaint();
        } else if(!this.picked && 400 - this.rH * 30 + 30 + this.rD * 30 == this.itemsHt3 && this.rW == 9 && this.numItems3 > 0) {
            this.topDepth = this.newBlocksDepth2[this.numItems3 - 1] * 30;
            this.picked = true;
            this.currentHeight = this.newBlocksDepth2[this.numItems3 - 1];
            --this.numItems3;
            frame.repaint();
        } else if(!this.picked && 400 - this.rH * 30 + 30 + this.rD * 30 == this.itemsHt && this.rW == 10 && this.numItems > 0) {
            this.topDepth = this.blocksDepth[this.numItems - 1] * 30;
            this.picked = true;
            this.currentHeight = this.blocksDepth[this.numItems - 1];
            --this.numItems;
            frame.repaint();
        } else if(this.picked) {
            this.message("must drop before picking again", "Error in call to pick()");
        } else {
            this.message("Can pick only from the top blocks", "Error in call to pick()");
        }

    }

    public void message(String var1, String var2) {
        JOptionPane.showMessageDialog((Component)null, var1, var2, 1);
        System.exit(0);
    }

    public void drop() {
        this.update();
        ++numOps;
        if(this.picked && 400 - this.rH * 30 + 30 + this.rD * 30 + this.topDepth == this.itemsHt2 && this.rW == 1) {
            if(requiredSet) {
                if(this.numItems2 < required.length && this.currentHeight == required[this.numItems2]) {
                    this.picked = false;
                    this.newBlocksDepth[this.numItems2++] = this.currentHeight;
                    frame.repaint();
                } else {
                    this.message("Not the required height", "Error in call to drop()");
                }
            } else if(this.ordered && this.numItems2 != 0 && this.currentHeight > this.newBlocksDepth[this.numItems2 - 1]) {
                this.message("Ordering Requested: Cannot place over a smaller block", "Error in call to drop()");
            } else {
                this.picked = false;
                this.newBlocksDepth[this.numItems2++] = this.currentHeight;
                frame.repaint();
            }
        } else if(this.picked && 400 - this.rH * 30 + 30 + this.rD * 30 + this.topDepth == this.itemsHt3 && this.rW == 9) {
            if(this.ordered && this.numItems3 != 0 && this.currentHeight > this.newBlocksDepth2[this.numItems3 - 1]) {
                this.message("Ordering Requested: Cannot place over a smaller block", "Error in call to drop()");
            } else {
                this.picked = false;
                this.newBlocksDepth2[this.numItems3++] = this.currentHeight;
                frame.repaint();
            }
        } else if(this.picked && 400 - this.rH * 30 + 30 + this.rD * 30 + this.topDepth == this.itemsHt && this.rW == 10) {
            if(this.ordered && this.numItems != 0 && this.currentHeight > this.blocksDepth[this.numItems - 1]) {
                this.message("Ordering Requested: Cannot place over a smaller block", "Error in call to drop()");
            } else {
                this.picked = false;
                this.blocksDepth[this.numItems++] = this.currentHeight;
                frame.repaint();
            }
        } else if(!this.picked) {
            this.message("must pick item before dropping", "Error in call to drop()");
        } else {
            this.message("Can only drop on top of blocks in col 1, 9 and 10", "Error in call to drop()");
        }

    }

    public void delay(int var1) {
        double var2 = 15.45D;

        try {
            Thread.sleep((long)(var1 * 10 * counter / 'ï¨€'));
        } catch (Exception var5) {
            ;
        }

    }

    public static void speedUp(int var0) {
        if(counter > 8000) {
            counter /= var0;
        }

    }

    public static void slowDown(int var0) {
        counter *= var0;
    }

    public void up() {
        ++numOps;
        this.delay(10);
        if(this.rH >= 14) {
            this.message("Robot height cannot be greater than 14", "Error in call to up()");
        } else {
            ++this.rH;
            frame.repaint();
        }

    }

    public void down() {
        ++numOps;
        this.delay(10);
        int var1 = this.rH - this.rD;
        if(this.picked) {
            var1 -= this.currentHeight;
        }

        if(this.rH <= 2) {
            this.message("Beyond limit: h must be greater than 1", "Error in call to down()");
        } else if(!this.checkValid(this.rW, var1 - 1)) {
            this.message("Obstacle found", "Error in call to down()");
        } else {
            for(int var2 = 1; var2 < this.rW; ++var2) {
                if(!this.checkValid(var2, this.rH - 1)) {
                    this.message("Obstacle found", "Error in call to down()");
                }
            }
        }

        --this.rH;
        frame.repaint();
    }

    public void contract() {
        ++numOps;
        this.delay(10);
        int var1 = this.rH - this.rD;
        if(this.picked) {
            var1 -= this.currentHeight;
        }

        if(this.rW <= 1) {
            this.message("Robot width cannot be less than 1", "Error in call to contract()");
        } else if(!this.checkValid(this.rW - 1, var1)) {
            this.message("hit obstacle", "Error in call to contract()");
        } else {
            --this.rW;
            frame.repaint();
        }

    }

    public void extend() {
        ++numOps;
        this.delay(10);
        int var1 = this.rH - this.rD;
        if(this.picked) {
            var1 -= this.currentHeight;
        }

        if(this.rW >= 10) {
            this.message("Robot width cannot be greater than 10", "Error in call to extend()");
        } else if(!this.checkValid(this.rW + 1, var1)) {
            this.message("hit obstacle", "Error in call to extend()");
        } else {
            ++this.rW;
            frame.repaint();
        }

    }

    public boolean checkValid(int var1, int var2) {
        return this.getHeight(var1) < var2;
    }

    public int getHeight(int var1) {
        return var1 > 2 && var1 < 9 && var1 - 3 < this.obstacles.length?this.obstacles[var1 - 3]:(var1 == 10?this.htItems1:(var1 == 1?this.htItems2:(var1 == 9?this.htItems3:0)));
    }

    public void lower() {
        ++numOps;
        this.delay(10);
        int var1 = this.rH - this.rD;
        if(this.picked) {
            var1 -= this.currentHeight;
        }

        if(this.rD >= this.rH - 1) {
            this.message("Beyond limit: d must be less than h", "Error in call to lower()");
        } else if(!this.checkValid(this.rW, var1 - 1)) {
            this.message("Obstacle found", "Error in call to lower()");
        }

        ++this.rD;
        frame.repaint();
    }

    public void raise() {
        ++numOps;
        this.delay(10);
        if(this.rD <= 0) {
            this.message("Beyond limit: d cannot be lessthan 0", "Error in call to raise()");
        } else {
            --this.rD;
            frame.repaint();
        }

    }

    public void paintComponent(Graphics var1) {
        super.paintComponent(var1);
        var1.drawString("The Robot Control Assignment", 200, 20);
        var1.drawLine(0, 400, 600, 400);
        var1.setColor(Color.yellow);
        var1.drawLine(100, 401, 150, 401);
        var1.setColor(Color.red);
        var1.drawLine(500, 401, 550, 401);
        var1.setColor(Color.black);

        int var2;
        for(var2 = 0; var2 < this.obstacles.length; ++var2) {
            this.drawObject(var1, var2, this.obstacles[var2]);
        }

        this.drawRobot(var1);
        this.drawItems(var1);
        var1.setColor(Color.black);
        var1.drawString("Target", 105, 421);
        var1.drawString("Temp", 505, 421);
        var1.drawString("Source", 555, 425);
        var1.drawString("Column", 50, 412);

        for(var2 = 1; var2 <= 10; ++var2) {
            var1.drawString("" + var2, 65 + var2 * 50, 412);
        }

        var1.drawString("Total Robot Moves = " + numOps, 280, 425);
    }

    public void drawObject(Graphics var1, int var2, int var3) {
        if(var3 > 0) {
            var1.fillRect(200 + var2 * 50 + 1, 400 - var3 * 30, 48, var3 * 30);
            var1.drawString("" + var3, 220 + var2 * 50, 400 - var3 * 30);
        }

    }

    public void drawItems(Graphics var1) {
        this.itemsHt = 400;
        this.htItems1 = 0;

        int var2;
        for(var2 = 0; var2 < this.numItems; ++var2) {
            this.itemsHt -= this.blocksDepth[var2] * 30;
            this.htItems1 += this.blocksDepth[var2];
            if(this.blocksDepth[var2] == 4) {
                var1.setColor(Color.red);
            } else if(this.blocksDepth[var2] == 3) {
                var1.setColor(Color.cyan);
            } else if(this.blocksDepth[var2] == 2) {
                var1.setColor(Color.blue);
            } else {
                var1.setColor(Color.yellow);
            }

            var1.fillRect(550, this.itemsHt, 50, this.blocksDepth[var2] * 30);
            var1.setColor(Color.black);
            var1.drawRect(550, this.itemsHt, 50, this.blocksDepth[var2] * 30);
        }

        var1.setColor(Color.black);
        this.itemsHt = 400;
        this.htItems1 = 0;

        for(var2 = 0; var2 < this.numItems; ++var2) {
            this.itemsHt -= this.blocksDepth[var2] * 30;
            this.htItems1 += this.blocksDepth[var2];
            var1.drawString("" + this.blocksDepth[var2], 570, this.itemsHt + this.blocksDepth[var2] * 15);
        }

        this.htItems2 = 0;
        this.itemsHt2 = 400;

        for(var2 = 0; var2 < this.numItems2; ++var2) {
            this.itemsHt2 -= this.newBlocksDepth[var2] * 30;
            this.htItems2 += this.newBlocksDepth[var2];
            if(this.newBlocksDepth[var2] == 4) {
                var1.setColor(Color.red);
            } else if(this.newBlocksDepth[var2] == 3) {
                var1.setColor(Color.cyan);
            } else if(this.newBlocksDepth[var2] == 2) {
                var1.setColor(Color.blue);
            } else {
                var1.setColor(Color.yellow);
            }

            var1.fillRect(100, this.itemsHt2, 50, this.newBlocksDepth[var2] * 30);
            var1.setColor(Color.black);
            var1.drawRect(100, this.itemsHt2, 50, this.newBlocksDepth[var2] * 30);
            var1.drawString("" + this.newBlocksDepth[var2], 120, this.itemsHt2 + this.newBlocksDepth[var2] * 15);
        }

        this.htItems3 = 0;
        this.itemsHt3 = 400;

        for(var2 = 0; var2 < this.numItems3; ++var2) {
            this.itemsHt3 -= this.newBlocksDepth2[var2] * 30;
            this.htItems3 += this.newBlocksDepth2[var2];
            if(this.newBlocksDepth2[var2] == 4) {
                var1.setColor(Color.red);
            } else if(this.newBlocksDepth2[var2] == 3) {
                var1.setColor(Color.cyan);
            } else if(this.newBlocksDepth2[var2] == 2) {
                var1.setColor(Color.blue);
            } else {
                var1.setColor(Color.yellow);
            }

            var1.fillRect(500, this.itemsHt3, 50, this.newBlocksDepth2[var2] * 30);
            var1.setColor(Color.black);
            var1.drawRect(500, this.itemsHt3, 50, this.newBlocksDepth2[var2] * 30);
            var1.drawString("" + this.newBlocksDepth2[var2], 520, this.itemsHt3 + this.newBlocksDepth2[var2] * 15);
        }

        var2 = 0;
        if(requiredSet) {
            for(int var3 = 0; var3 < required.length; ++var3) {
                int var4 = required[var3];
                var2 += var4;
                if(required[var3] == 4) {
                    var1.setColor(Color.red);
                } else if(required[var3] == 3) {
                    var1.setColor(Color.cyan);
                } else if(required[var3] == 2) {
                    var1.setColor(Color.blue);
                } else {
                    var1.setColor(Color.yellow);
                }

                var1.drawRect(100, 400 - var2 * 30, 50, var4 * 30);
            }
        }

    }

    public void drawRobot(Graphics var1) {
        var1.setColor(Color.pink);
        var1.fillRect(50, 400 - this.rH * 30, 50, this.rH * 30);
        var1.setColor(Color.black);
        var1.drawRect(52, 400 - this.rH * 30 + 2, 46, this.rH * 30 - 4);
        var1.drawString("h=" + this.rH, 60, 400 - this.rH * 15 - 10);
        var1.setColor(Color.pink);
        var1.fillRect(100, 400 - this.rH * 30, this.rW * 50, 30);
        var1.setColor(Color.black);
        var1.drawString("w=" + this.rW, 100 + this.rW * 25 - 8, 400 - this.rH * 30 + 18);
        var1.drawRect(102, 400 - this.rH * 30 + 2, this.rW * 50 - 4, 26);
        if(this.rD > 0) {
            var1.setColor(Color.pink);
            var1.fillRect(50 + this.rW * 50, 400 - this.rH * 30 + 30, 50, this.rD * 30);
            var1.setColor(Color.black);
            var1.drawRect(50 + this.rW * 50 + 2, 400 - this.rH * 30 + 30 + 2, 46, this.rD * 30 - 4);
            var1.drawString("d=" + this.rD, 60 + this.rW * 50, 400 - this.rH * 30 + 30 + this.rD * 15 + 10);
        }

        var1.setColor(Color.pink);
        if(this.picked) {
            if(this.currentHeight == 4) {
                var1.setColor(Color.red);
            } else if(this.currentHeight == 3) {
                var1.setColor(Color.cyan);
            } else if(this.currentHeight == 2) {
                var1.setColor(Color.blue);
            } else {
                var1.setColor(Color.yellow);
            }

            var1.fillRect(50 + this.rW * 50, 400 - this.rH * 30 + this.rD * 30 + 30, 50, this.topDepth);
            var1.setColor(Color.black);
            var1.fillRect(50 + this.rW * 50, 400 - this.rH * 30 + this.rD * 30 + 30 - 6, 4, 12);
            var1.fillRect(50 + this.rW * 50 + 50 - 4, 400 - this.rH * 30 + this.rD * 30 + 30 - 6, 4, 12);
            var1.setColor(Color.black);
            var1.drawRect(50 + this.rW * 50, 400 - this.rH * 30 + this.rD * 30 + 30, 50, this.topDepth);
            var1.drawString("" + this.currentHeight, 70 + this.rW * 50, 400 - this.rH * 30 + this.rD * 30 + 30 + this.currentHeight * 15);
        }

    }
}
